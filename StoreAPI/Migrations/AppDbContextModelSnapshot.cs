// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreAPI.Context;

#nullable disable

namespace StoreAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("StoreAPI.Entities.Authentication.ClientRole", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("ClientId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ClientRole");
                });

            modelBuilder.Entity("StoreAPI.Entities.Authentication.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("StoreAPI.Entities.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("District")
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("StoreAPI.Entities.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hardware"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PlayStation"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Smartphone"
                        });
                });

            modelBuilder.Entity("StoreAPI.Entities.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("CPF")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Client");
                });

            modelBuilder.Entity("StoreAPI.Entities.Models.CreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("MaxLimit")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<decimal?>("UsedLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(0.0m);

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("CreditCard");
                });

            modelBuilder.Entity("StoreAPI.Entities.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentState")
                        .HasColumnType("int");

                    b.Property<int>("Installments")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("StoreAPI.Entities.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("StoreAPI.Entities.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "It is a video card with excellent cost-effectiveness, extremely efficient and capable of delivering better performance in games.",
                            ImageUrl = "Utils/Images/GraphicCard4070Ti.png",
                            Name = "Graphic Card 4070 Ti",
                            Price = 7.500m,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "It is a video card with excellent cost-effectiveness, extremely efficient and capable of delivering better performance in games.",
                            ImageUrl = "Utils/Images/GraphicCard5090.png",
                            Name = "Graphic Card 5090",
                            Price = 22.999m,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "The latest console from Sony, more efficient than previous generations, delivering maximum performance and excellent graphics.",
                            ImageUrl = "Utils/Image/ConsolePs5.png",
                            Name = "Console Sony PlayStation 5",
                            Price = 3.299m,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "Console from Sony, more efficient than previous generations, delivering maximum performance and excellent graphics.",
                            ImageUrl = "Utils/Image/ConsolePs4.png",
                            Name = "Console Sony PlayStation 4",
                            Price = 2.299m,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Description = "It is an excellent cost-effective cell phone, currently considered the best of today, with a 150mpx camera.",
                            ImageUrl = "Utils/Image/XiaomiRedmiNote13.png",
                            Name = "Xiaomi Redmi Note 13",
                            Price = 3.599m,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Description = "It is an excellent cost-effective cell phone, currently considered the best of today, with a 150mpx camera.",
                            ImageUrl = "Utils/Image/Iphone15.png",
                            Name = "Iphone 15",
                            Price = 6.500m,
                            Quantity = 0
                        });
                });

            modelBuilder.Entity("StoreAPI.Entities.Authentication.ClientRole", b =>
                {
                    b.HasOne("StoreAPI.Entities.Models.Client", "Client")
                        .WithMany("ClientRole")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreAPI.Entities.Authentication.Role", "Role")
                        .WithMany("ClientRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("StoreAPI.Entities.Models.Address", b =>
                {
                    b.HasOne("StoreAPI.Entities.Models.Client", "Client")
                        .WithOne("Address")
                        .HasForeignKey("StoreAPI.Entities.Models.Address", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("StoreAPI.Entities.Models.CreditCard", b =>
                {
                    b.HasOne("StoreAPI.Entities.Models.Client", "Client")
                        .WithOne("CreditCard")
                        .HasForeignKey("StoreAPI.Entities.Models.CreditCard", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("StoreAPI.Entities.Models.Order", b =>
                {
                    b.HasOne("StoreAPI.Entities.Models.Client", "Client")
                        .WithMany("Order")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("StoreAPI.Entities.Models.OrderItem", b =>
                {
                    b.HasOne("StoreAPI.Entities.Models.Order", "Order")
                        .WithMany("OrderItem")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreAPI.Entities.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StoreAPI.Entities.Models.Product", b =>
                {
                    b.HasOne("StoreAPI.Entities.Models.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("StoreAPI.Entities.Authentication.Role", b =>
                {
                    b.Navigation("ClientRole");
                });

            modelBuilder.Entity("StoreAPI.Entities.Models.Category", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("StoreAPI.Entities.Models.Client", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("ClientRole");

                    b.Navigation("CreditCard");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("StoreAPI.Entities.Models.Order", b =>
                {
                    b.Navigation("OrderItem");
                });
#pragma warning restore 612, 618
        }
    }
}
